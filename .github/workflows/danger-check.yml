name: Danger Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  danger-analysis:
    name: Run Danger Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper git diff

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Install dependencies
        run: |
          # Install jq if not already available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Run Danger Analysis
        id: danger
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTIONS: true
          LOCAL_MODE: false
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # Make the script executable
          chmod +x run-danger.sh

          # Run the danger system
          ./run-danger.sh ${{ github.base_ref }}

          echo "analysis_exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload analysis results
        id: upload-results
        uses: actions/upload-artifact@v4
        with:
          name: danger-results
          path: Danger/danger-results.json
          retention-days: 7

      - name: Format and Post PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GEN_TOKEN }}
          script: |
            const fs = require('fs');

            // Read the results file
            let results;
            try {
              const resultsJson = fs.readFileSync('Danger/danger-results.json', 'utf8');
              results = JSON.parse(resultsJson);
            } catch (error) {
              console.error('Error reading results file:', error);
              return;
            }

            // Extract data from results
            const errors = results.results.errors || [];
            const warnings = results.results.warnings || [];
            const infos = results.results.infos || [];
            const summary = results.summary;

            // Build the comment
            let comment = '## üîç Danger Analysis Results\n\n';

            // Add summary
            comment += `**Summary:** ${summary.passed ? '‚úÖ All checks passed!' : '‚ùå Issues found!'}\n`;
            comment += `- **Errors:** ${summary.error_count}\n`;
            comment += `- **Warnings:** ${summary.warning_count}\n`;
            comment += `- **Info:** ${summary.info_count}\n\n`;

            // Add errors section (always show all errors)
            if (errors.length > 0) {
              comment += '### ‚ùå Errors\n\n';
              errors.forEach((error, index) => {
                comment += `<details>\n`;
                comment += `<summary><strong>${index + 1}. ${error.rule_name.trim()}</strong> (${error.rule_id})</summary>\n\n`;
                comment += `- **File:** \`${error.file.trim()}\`${error.line > 0 ? ` (line ${error.line})` : ''}\n`;
                comment += `- **Message:** ${error.message.trim()}\n`;
                if (error.details) {
                  comment += `- **Details:** ${error.details.trim()}\n`;
                }
                comment += '\n</details>\n\n';
              });
            }

            // Handle warnings and info
            const totalWarningsAndInfo = warnings.length + infos.length;

            if (totalWarningsAndInfo > 20) {
              // If more than 20 warnings/info combined, provide a link
              comment += '### ‚ö†Ô∏è Warnings and ‚ÑπÔ∏è Info\n\n';
              comment += `There are ${warnings.length} warnings and ${infos.length} info messages.\n\n`;
              
              // Get the artifact URL
              const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              comment += `Due to the large number of warnings and info messages, please [view the full results in the workflow artifacts](${runUrl}#artifacts).\n\n`;
            } else {
              // Show all warnings
              if (warnings.length > 0) {
                comment += '### ‚ö†Ô∏è Warnings\n\n';
                warnings.forEach((warning, index) => {
                  comment += `<details>\n`;
                  comment += `<summary><strong>${index + 1}. ${warning.rule_name.trim()}</strong> (${warning.rule_id})</summary>\n\n`;
                  comment += `- **File:** \`${warning.file.trim()}\`${warning.line > 0 ? ` (line ${warning.line})` : ''}\n`;
                  comment += `- **Message:** ${warning.message.trim()}\n`;
                  if (warning.details) {
                    comment += `- **Details:** ${warning.details.trim()}\n`;
                  }
                  comment += '\n</details>\n\n';
                });
              }
              
              // Show all info
              if (infos.length > 0) {
                comment += '### ‚ÑπÔ∏è Info\n\n';
                infos.forEach((info, index) => {
                  comment += `<details>\n`;
                  comment += `<summary><strong>${index + 1}. ${info.rule_name.trim()}</strong> (${info.rule_id})</summary>\n\n`;
                  comment += `- **File:** \`${info.file.trim()}\`${info.line > 0 ? ` (line ${info.line})` : ''}\n`;
                  comment += `- **Message:** ${info.message.trim()}\n`;
                  if (info.details) {
                    comment += `- **Details:** ${info.details.trim()}\n`;
                  }
                  comment += '\n</details>\n\n';
                });
              }
            }

            // Add timestamp
            comment += `---\n`;
            comment += `*Analysis performed at: ${results.timestamp}*\n`;
            comment += `*Commit: ${results.commit}*\n`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Danger Analysis Results')
            );

            // Create or update comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Check if PR should be blocked
        if: steps.danger.outputs.analysis_exit_code != '0'
        run: |
          echo "‚ùå Danger checks failed! Please fix the issues before merging."
          exit 1
